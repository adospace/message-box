@page "/"
@using MessageBox.Server.Tcp.Host.Shared
@using System.Linq
@implements IDisposable
@inject IMessageStatisticService _messageStatisticService

<PageTitle>Message-Box|Dashboard</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudChart ChartType="ChartType.Line" ChartSeries="@_series" @bind-SelectedIndex="_selectedSeriesIndex" XAxisLabels="@_xAxisLabels.ToArray()" Width="100%" Height="350px"></MudChart>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private Timer? _timer;

    private static readonly TimeSpan ChartPeriod = TimeSpan.FromMinutes(1);

    private int _selectedSeriesIndex = -1; //default value cannot be 0 -> first selectedindex is 0.

    private readonly Dictionary<Guid, Queue<QueueMessageCountStatistic>> _queueMessageCountStatistics = new();
    private readonly Dictionary<string, Queue<ExchangeMessageCountStatistic>> _exchangeMessageCountStatistics = new();

    private readonly List<ChartSeries> _series = new();

    private readonly List<string> _xAxisLabels = new();
    
    
    
    protected override void OnInitialized()
    {
        _timer = new Timer(_=> InvokeAsync(OnTick), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private async Task OnTick()
    {
        var now = DateTime.UtcNow;
        var result = await _messageStatisticService.GetServerMessageStatistic();

        foreach (var queueMessageCountStatistic in result.QueueMessageCountStatistics)
        {
            _queueMessageCountStatistics.TryGetValue(queueMessageCountStatistic.Id, out var queueMessageCountStatisticsQueue);
            if (queueMessageCountStatisticsQueue == null)
            {
                _queueMessageCountStatistics[queueMessageCountStatistic.Id] = queueMessageCountStatisticsQueue = new Queue<QueueMessageCountStatistic>();
            }
            
            if (queueMessageCountStatisticsQueue.Count > 100)
            {
                queueMessageCountStatisticsQueue.Dequeue();
            }

            queueMessageCountStatisticsQueue.Enqueue(queueMessageCountStatistic);
        }
        
        foreach (var exchangeMessageCountStatistic in result.ExchangeMessageCountStatistics)
        {
            _exchangeMessageCountStatistics.TryGetValue(exchangeMessageCountStatistic.Key, out var exchangeMessageCountStatisticsQueue);
            if (exchangeMessageCountStatisticsQueue == null)
            {
                _exchangeMessageCountStatistics[exchangeMessageCountStatistic.Key] = exchangeMessageCountStatisticsQueue = new Queue<ExchangeMessageCountStatistic>();
            }
            
            if (exchangeMessageCountStatisticsQueue.Count > 100)
            {
                exchangeMessageCountStatisticsQueue.Dequeue();
            }
            
            exchangeMessageCountStatisticsQueue.Enqueue(exchangeMessageCountStatistic);
        }

        try
        {
            Console.WriteLine("Building series...");
            BuildChartSeries(now);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void BuildChartSeries(DateTime now)
    {
        _series.Clear();
        _xAxisLabels.Clear();
        
        _series.AddRange(_queueMessageCountStatistics.Select(_ =>
        {
            var series = _.Value.GroupBy(item => (int)Math.Round((item.TimeStamp - now).TotalSeconds)).ToDictionary(item => item.Key, item => item.First());
            return new ChartSeries()
            {
                Name = _.Key.ToString(),
                Data = Enumerable.Range(-(int)ChartPeriod.TotalSeconds, (int)ChartPeriod.TotalSeconds)
                    .Select(item =>
                    {
                        if (!series.TryGetValue(item - 1, out var prevSeriesItem)) return 0.0;
                        if (series.TryGetValue(item, out var seriesItem))
                        {
                            return seriesItem.Value - prevSeriesItem.Value;
                        }
                        return 0.0;
                    })
                    .ToArray()
            };
        }));
                
        _series.AddRange(_exchangeMessageCountStatistics.Select(_ =>
        {
            var series = _.Value.GroupBy(item => (int)Math.Round((item.TimeStamp - now).TotalSeconds)).ToDictionary(item => item.Key, item => item.First());
            return new ChartSeries()
            {
                Name = _.Key,
                Data = Enumerable.Range(-(int)ChartPeriod.TotalSeconds, (int)ChartPeriod.TotalSeconds)
                    .Select(item =>
                    {
                        if (!series.TryGetValue(item - 1, out var prevSeriesItem)) return 0.0;
                        if (series.TryGetValue(item, out var seriesItem))
                        {
                            return seriesItem.Value - prevSeriesItem.Value;
                        }
                        return 0.0;
                    })
                    .ToArray()
            };
        }));

        _xAxisLabels.AddRange(
            Enumerable.Range(-(int)ChartPeriod.TotalSeconds, (int)ChartPeriod.TotalSeconds)
                .Select(clockTick => now.AddSeconds(clockTick).ToLocalTime().ToShortTimeString()));
        
        StateHasChanged();

        Console.WriteLine(string.Join(Environment.NewLine, _series.Select(_ => _.Name + " -> " + string.Join("-", _.Data))));
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
