@page "/"
@using MessageBox.Server.Tcp.Host.Shared
@using System.Linq
@using MessageBox.Server.Tcp.Host.Client.Pages.Components
@implements IDisposable
@inject IMessageStatisticService _messageStatisticService

<PageTitle>Message-Box|Dashboard</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MessageChartComponent ChartSeriesConfigs="_seriesConfigs"  />
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private Timer? _timer;

    private MessageChartComponent.ChartSeriesConfig[] _seriesConfigs = Array.Empty<MessageChartComponent.ChartSeriesConfig>();

    private Dictionary<string, (int CurrentCount, int TotalCount)> _tickValues = new();
    private Dictionary<string, (int CurrentCount, int TotalCount)> _previousTickValues = new();

    protected override void OnInitialized()
    {
        _timer = new Timer(_=> InvokeAsync(OnTick), null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }

    private async Task OnTick()
    {
        var (queueMessageCountStatistics, exchangeMessageCountStatistics) = await _messageStatisticService.GetServerMessageStatistic();

        var messageCountStatistics = exchangeMessageCountStatistics.Concat(queueMessageCountStatistics.Cast<IMessageCountStatistics>()).ToArray();

        var newSeriesConfigs = messageCountStatistics.Select(_ => new MessageChartComponent.ChartSeriesConfig(_.Key, _.Label, GetSeriesValue)).ToArray();

        _previousTickValues = _tickValues;
        _tickValues = messageCountStatistics.ToDictionary(_ => _.Key, _ => (_.CurrentCount, _.TotalCount));

        if (!newSeriesConfigs.SequenceEqual(_seriesConfigs))
        {
            _seriesConfigs = newSeriesConfigs;
            StateHasChanged();
        }
    }

    private double GetSeriesValue(string key)
    {
        _previousTickValues.TryGetValue(key, out var previousTickValue);
        _tickValues.TryGetValue(key, out var currentTickValue);

        return currentTickValue.CurrentCount + currentTickValue.TotalCount - previousTickValue.TotalCount;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
